std::map<key_type, mapped_type>
value_type 与pair<key_type, mapped_type> 在构建map对象元素时作用相同

对象构建：
typedef map<string, int> myMap；
myMap mp;

接口：
mp.insert(myMap::value_type("jim", 100));
mp.insert(pair<string, int>("green", 99));

mp内包含的元素是以key为比较对象进行排序的，内部以红黑树实现，插入value_type元素对过程中，不断调整树结构
mp["hello"] = 98;也可以实现插入


enum Color{
	BLACK，
	RED
}；
template<class K, class V>
struct RBTreeNode{

	typedef RBTreeNode<K, V> Node;
	Node* left;
	Node* right;
	Node* parent;
	pair<K, V> _kv;  
	Color color;

	RBTreeNode(pair<K,V> kv):
		left(nullptr), right(nullptr), parent(nullptr), _kv(kv), color(RED)
	{}
}

template<class K, class V>
class RBTree{
public:
	RBTree():_root(nullptr)
	{}
private:
	RBTreeNode* _root;

}

template<class K, class V>
class map{

public:
	struct MapKeyofT
	{
		const K& operator()(const pair<const K, V>& data)
		{
			return data.first;
		}
	};
	typedef typename RBTree<K, pair<const K, V>, MapKeyofT>::iterator iterator;
	iterator begin()
	{
		return _t.begin();
	}
	iterator end()
	{
		return _t.end();
	}
	pair<iterator, bool> insert(const pair<K, V>& data)
	{
		return _t.Insert(data);
	}
	V& operator[](const K& key)
	{
		pair<iterator, bool> ret = _t.Insert(make_pair(key, V()));
		return ret.first->second;
	}
private:
	RBTree<K, pair<K,V>, MapKeyofT> _tree;
}


C++ map，set底层的红黑树实现
1. 为什么用红黑树实现？
map, set底层都提供了排序功能，红黑树形式存储的键值是有序的。同时红黑树可以在O(log n)时间内做插入，查找和删除。
2. 红黑树的性质
红黑树是每个节点都带有颜色属性的二叉搜索树，颜色要么是红色，要么是黑色。
性质1：红黑树的每个节点要么是红色，要么是黑色。
性质2：红黑树的根节点一定是黑色的。
性质3：红黑树的所有外部节点都是黑色的。（外部节点是扩充二叉树中对所有空指针填充的节点）
性质4：红黑树的所有红色节点的两个子节点一定是黑色节点。（这就保证了红黑树从根到外部节点的任一条路径上都不会有两个连续的红色节点）
性质5：红黑树从根到任意一个外部节点的路径上的黑色节点的数目都是相同的。
3. HashMap和TreeMap底层实现的不同
C++中unordered_map的底层是用哈希表来实现的，通过key的哈希路由到每一个桶（即数组）用来存放内容。通过key来获取value的时间复杂度就是O（1）。因为key的哈希容易碰撞，所以需要对碰撞做处理。unordered_map里的每一个数组（桶）里面存的其实是一个链表，key的哈希冲突以后会加到链表的尾部，这是再通过key获取value的时间复杂度就变成O(n），当碰撞很多的时候查询就会变慢。为了优化这个时间复杂度，map的底层就把这个链表转换成了红黑树，这样虽然插入增加了复杂度，但提高了频繁哈希碰撞时的查询效率，使查询效率变成O(log n)。
4. 为什么使用红黑树而不是二叉搜索树？
二叉搜索树并不一定是一颗平衡树，二叉搜索树（BST）只是左子树的值一定小于根节点，而右子树的值一定大于根节点。如果插入的值是有序的，那么构造出来的二叉树将是一个链表，它的时间复杂度将达到O(n)。而使用红黑树，可以通过对每个节点标色的方式，每次更新数据后进行平衡，保证查找效率。
5. 左旋，右旋操作
红黑树在插入数据时要保持它的平衡需要进行着色处理，配合左旋，右旋来保持它的平衡。可以认为红色和黑色是为了更好地辅助平衡。平衡的操作如下：首先，新插入的节点必须是红色。因为黑色破坏性质的可能性更大。实现平衡的公式如下：
假定X是新插入的节点，P是父节点，Y是叔父节点，G是祖父节点，P是G的左孩子
当Y为红色->P，Y变黑，G变红，X变G
当Y为黑色，X是右孩子->左旋P，X变P
当Y为黑色，X为左孩子->G变红，P变黑，右旋G
当P为G的右孩子，直接做镜像操作就可以。